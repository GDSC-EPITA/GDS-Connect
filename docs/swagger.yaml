definitions:
  handlers.OtherUsers:
    properties:
      otherUsers:
        items:
          type: string
        type: array
    type: object
  models.User:
    properties:
      age:
        type: integer
      anonymous:
        type: boolean
      gender:
        type: string
      interests:
        items:
          type: string
        type: array
      name:
        type: string
      usersVisibility:
        items:
          type: string
        type: array
    type: object
info:
  contact: {}
paths:
  /users:
    get:
      description: Retrieves all users from the database along with their Firestore
        document IDs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: 'Error: Error retrieving users'
          schema:
            type: string
      summary: Retrieves all users from the database with their document IDs
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Adds a user from the body of the request to the database
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            type: string
        "400":
          description: 'Error: Interests cannot be null'
          schema:
            type: string
      summary: Creates a new user
      tags:
      - Users
  /users/{id}:
    get:
      description: Returns the user with the given ID from the database
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'Error: Invalid user ID'
          schema:
            type: string
        "404":
          description: 'Error: Couldn''t find the requested user'
          schema:
            type: string
      summary: Get a user by ID
      tags:
      - Users
  /users/{id}/makeInvisible:
    post:
      consumes:
      - application/json
      description: Makes a user invisible to other users based on the given user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Other users
        in: body
        name: otherUsers
        required: true
        schema:
          $ref: '#/definitions/handlers.OtherUsers'
      produces:
      - application/json
      responses:
        "200":
          description: User visibility updated
          schema:
            type: string
        "400":
          description: 'Error: Invalid user ID'
          schema:
            type: string
        "404":
          description: 'Error: User not found'
          schema:
            type: string
        "500":
          description: 'Error: Internal server error'
          schema:
            type: string
      summary: Make a user invisible to other given users
      tags:
      - Users
  /users/{id}/makeVisible:
    post:
      consumes:
      - application/json
      description: Makes a user visible to other users based on the given user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Other users
        in: body
        name: otherUsers
        required: true
        schema:
          $ref: '#/definitions/handlers.OtherUsers'
      produces:
      - application/json
      responses:
        "200":
          description: User visibility updated
          schema:
            type: string
        "400":
          description: 'Error: Invalid user ID'
          schema:
            type: string
        "404":
          description: 'Error: User not found'
          schema:
            type: string
        "500":
          description: 'Error: Internal server error'
          schema:
            type: string
      summary: Make a user visible to other given users
      tags:
      - Users
  /users/{id}/matches:
    get:
      consumes:
      - application/json
      description: Finds users with matching interests based on the given user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users with matching interests
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: 'Error: Invalid user ID'
          schema:
            type: string
        "404":
          description: 'Error: User not found'
          schema:
            type: string
        "500":
          description: 'Error: Internal server error'
          schema:
            type: string
      summary: Match users by shared interests
      tags:
      - Users
  /users/{id}/updateVisibility:
    post:
      consumes:
      - application/json
      description: Makes a user visible or invisible to all other users based on the
        given user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User visibility updated
          schema:
            type: string
        "400":
          description: 'Error: Invalid user ID'
          schema:
            type: string
        "404":
          description: 'Error: User not found'
          schema:
            type: string
        "500":
          description: 'Error: Internal server error'
          schema:
            type: string
      summary: Make a user visibility to all other users
      tags:
      - Users
swagger: "2.0"
